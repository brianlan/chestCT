import sys
from collections import OrderedDict

import pytest
import numpy as np
from numpy.testing import assert_almost_equal


sys.argv = ["x", "--objinfo-path", "x", "--meta-dir", "x", "--output-file-path", "x"]


def test_match_detections_into_groups():
    from merge_pred_results import match_detections_into_groups

    slice_partition = OrderedDict(
        {
            "10": np.array([[1.0, 334.2, 333.6, 372.5, 369.9, 0.1262], [1.0, 306.6, 291.3, 366.7, 377.6, 0.0628]]),
            "11": np.array([[1.0, 301.5, 311.4, 342.7, 353.8, 0.2658], [1.0, 332.3, 332.6, 373.4, 369.8, 0.1116]]),
            "12": np.array(
                [
                    [1.0, 300.2, 308.1, 337.0, 355.2, 0.726],
                    [1.0, 296.6, 320.7, 318.2, 349.6, 0.0591],
                    [1.0, 290.0, 272.9, 400.8, 375.1, 0.0567],
                ]
            ),
            "13": np.array([[1.0, 296.0, 308.9, 335.9, 356.9, 0.6647]]),
            "14": np.array([[1.0, 186.5, 146.5, 222.0, 180.6, 0.056], [1.0, 321.9, 286.6, 413.2, 356.0, 0.1328]]),
            "15": np.array([[1.0, 188.8, 147.7, 222.4, 182.2, 0.2534], [1.0, 329.5, 284.4, 410.9, 359.1, 0.5493]]),
            "16": np.array([[1.0, 191.0, 146.8, 224.1, 181.6, 0.1247], [1.0, 329.1, 282.0, 409.6, 356.6, 0.2876]]),
            "17": np.array(
                [
                    [1.0, 387.7, 246.1, 410.6, 267.3, 0.1275],
                    [1.0, 190.9, 150.0, 225.5, 190.8, 0.0503],
                    [1.0, 323.9, 261.7, 407.3, 346.5, 0.0852],
                ]
            ),
            "18": np.array(
                [
                    [1.0, 385.7, 246.3, 409.9, 268.1, 0.143],
                    [1.0, 304.0, 280.7, 338.6, 320.1, 0.0606],
                    [1.0, 302.4, 234.8, 412.0, 347.6, 0.0859],
                ]
            ),
            "19": np.array([[1.0, 376.9, 248.9, 410.6, 284.4, 0.0601], [1.0, 310.7, 250.7, 406.8, 316.5, 0.1501]]),
            "20": np.array([[1.0, 343.9, 242.4, 410.0, 309.8, 0.1443]]),
            "21": np.array(
                [
                    [1.0, 346.5, 240.0, 407.3, 337.2, 0.3886],
                    [2.0, 277.3, 245.1, 297.2, 265.1, 0.0701],
                    [3.0, 277.5, 246.1, 297.3, 264.5, 0.1325],
                ]
            ),
            "22": np.array(
                [
                    [1.0, 365.5, 252.5, 406.2, 298.3, 0.0834],
                    [1.0, 335.6, 255.2, 406.5, 348.3, 0.4653],
                    [3.0, 277.6, 246.2, 297.5, 264.7, 0.1503],
                ]
            ),
            "23": np.array(
                [
                    [1.0, 223.3, 149.6, 255.4, 190.7, 0.2933],
                    [1.0, 365.9, 253.3, 406.7, 297.3, 0.1004],
                    [1.0, 334.1, 256.4, 404.0, 349.4, 0.5352],
                ]
            ),
            "24": np.array(
                [
                    [1.0, 224.4, 149.1, 257.8, 192.1, 0.552],
                    [1.0, 366.1, 254.6, 407.5, 295.9, 0.1367],
                    [1.0, 386.8, 261.7, 409.5, 283.6, 0.0826],
                    [1.0, 329.9, 255.1, 403.5, 349.9, 0.4196],
                ]
            ),
            "25": np.array(
                [
                    [1.0, 323.7, 311.9, 372.9, 353.1, 0.0902],
                    [1.0, 364.6, 254.0, 407.9, 292.0, 0.1936],
                    [1.0, 386.1, 261.5, 409.8, 283.2, 0.0529],
                    [1.0, 307.0, 239.5, 412.9, 357.0, 0.3813],
                ]
            ),
            "26": np.array([[1.0, 361.2, 251.7, 407.1, 293.4, 0.3898], [1.0, 304.0, 238.8, 416.7, 354.8, 0.2841]]),
            "27": np.array(
                [
                    [1.0, 362.1, 250.2, 405.6, 292.8, 0.4389],
                    [1.0, 232.5, 149.1, 273.4, 196.1, 0.1167],
                    [1.0, 331.3, 244.7, 409.2, 325.8, 0.1273],
                ]
            ),
            "28": np.array([[1.0, 231.4, 148.8, 274.1, 200.5, 0.4956], [1.0, 362.4, 250.1, 404.4, 295.2, 0.4509]]),
            "29": np.array(
                [
                    [1.0, 364.5, 251.7, 404.1, 295.7, 0.4218],
                    [1.0, 229.2, 149.0, 276.1, 201.5, 0.4381],
                    [1.0, 203.4, 129.6, 296.3, 233.8, 0.1206],
                ]
            ),
            "30": np.array([[1.0, 234.9, 148.4, 275.7, 197.4, 0.5958], [1.0, 365.1, 251.8, 405.6, 294.7, 0.3171]]),
            "31": np.array([[1.0, 237.4, 148.6, 277.3, 192.6, 0.1917]]),
            "32": np.array([[1.0, 250.7, 146.6, 287.4, 179.1, 0.105]]),
        }
    )

    lesions_3d = match_detections_into_groups(slice_partition)

    assert_almost_equal(
        lesions_3d[0],
        np.array([[10.0, 1.0, 334.2, 333.6, 372.5, 369.9, 0.1262], [11.0, 1.0, 332.3, 332.6, 373.4, 369.8, 0.1116]]),
    )

    assert_almost_equal(lesions_3d[1], np.array([[10.0, 1.0, 306.6, 291.3, 366.7, 377.6, 0.0628]]))

    assert_almost_equal(
        lesions_3d[2],
        np.array(
            [
                [11.0, 1.0, 301.5, 311.4, 342.7, 353.8, 0.2658],
                [12.0, 1.0, 300.2, 308.1, 337.0, 355.2, 0.726],
                [13.0, 1.0, 296.0, 308.9, 335.9, 356.9, 0.6647],
            ]
        ),
    )

    assert_almost_equal(lesions_3d[3], np.array([[12.0, 1.0, 290.0, 272.9, 400.8, 375.1, 0.0567]]))

    assert_almost_equal(lesions_3d[4], np.array([[12.0, 1.0, 296.6, 320.7, 318.2, 349.6, 0.0591]]))

    assert_almost_equal(
        lesions_3d[5],
        np.array(
            [
                [14.0, 1.0, 321.9, 286.6, 413.2, 356.0, 0.1328],
                [15.0, 1.0, 329.5, 284.4, 410.9, 359.1, 0.5493],
                [16.0, 1.0, 329.1, 282.0, 409.6, 356.6, 0.2876],
                [17.0, 1.0, 323.9, 261.7, 407.3, 346.5, 0.0852],
            ]
        ),
    )

    assert_almost_equal(
        lesions_3d[6],
        np.array(
            [
                [14.0, 1.0, 186.5, 146.5, 222.0, 180.6, 0.056],
                [15.0, 1.0, 188.8, 147.7, 222.4, 182.2, 0.2534],
                [16.0, 1.0, 191.0, 146.8, 224.1, 181.6, 0.1247],
                [17.0, 1.0, 190.9, 150.0, 225.5, 190.8, 0.0503],
            ]
        ),
    )

    assert_almost_equal(
        lesions_3d[7],
        np.array([[17.0, 1.0, 387.7, 246.1, 410.6, 267.3, 0.1275], [18.0, 1.0, 385.7, 246.3, 409.9, 268.1, 0.143]]),
    )

    assert_almost_equal(lesions_3d[8], np.array([[18.0, 1.0, 304.0, 280.7, 338.6, 320.1, 0.0606]]))

    assert_almost_equal(lesions_3d[9], np.array([[18.0, 1.0, 302.4, 234.8, 412.0, 347.6, 0.0859]]))

    assert_almost_equal(lesions_3d[10], np.array([[19.0, 1.0, 376.9, 248.9, 410.6, 284.4, 0.0601]]))

    assert_almost_equal(lesions_3d[11], np.array([[19.0, 1.0, 310.7, 250.7, 406.8, 316.5, 0.1501]]))

    assert_almost_equal(
        lesions_3d[12],
        np.array(
            [
                [20.0, 1.0, 343.9, 242.4, 410.0, 309.8, 0.1443],
                [21.0, 1.0, 346.5, 240.0, 407.3, 337.2, 0.3886],
                [22.0, 1.0, 335.6, 255.2, 406.5, 348.3, 0.4653],
                [23.0, 1.0, 334.1, 256.4, 404.0, 349.4, 0.5352],
                [24.0, 1.0, 329.9, 255.1, 403.5, 349.9, 0.4196],
            ]
        ),
    )

    assert_almost_equal(lesions_3d[13], np.array([[21.0, 2.0, 277.3, 245.1, 297.2, 265.1, 0.0701]]))

    assert_almost_equal(
        lesions_3d[14],
        np.array([[21.0, 3.0, 277.5, 246.1, 297.3, 264.5, 0.1325], [22.0, 3.0, 277.6, 246.2, 297.5, 264.7, 0.1503]]),
    )

    assert_almost_equal(
        lesions_3d[15],
        np.array(
            [
                [22.0, 1.0, 365.5, 252.5, 406.2, 298.3, 0.0834],
                [23.0, 1.0, 365.9, 253.3, 406.7, 297.3, 0.1004],
                [24.0, 1.0, 366.1, 254.6, 407.5, 295.9, 0.1367],
                [25.0, 1.0, 364.6, 254.0, 407.9, 292.0, 0.1936],
                [26.0, 1.0, 361.2, 251.7, 407.1, 293.4, 0.3898],
                [27.0, 1.0, 362.1, 250.2, 405.6, 292.8, 0.4389],
                [28.0, 1.0, 362.4, 250.1, 404.4, 295.2, 0.4509],
                [29.0, 1.0, 364.5, 251.7, 404.1, 295.7, 0.4218],
                [30.0, 1.0, 365.1, 251.8, 405.6, 294.7, 0.3171],
            ]
        ),
    )

    assert_almost_equal(
        lesions_3d[16],
        np.array([[23.0, 1.0, 223.3, 149.6, 255.4, 190.7, 0.2933], [24.0, 1.0, 224.4, 149.1, 257.8, 192.1, 0.552]]),
    )

    assert_almost_equal(
        lesions_3d[17],
        np.array([[24.0, 1.0, 386.8, 261.7, 409.5, 283.6, 0.0826], [25.0, 1.0, 386.1, 261.5, 409.8, 283.2, 0.0529]]),
    )

    assert_almost_equal(lesions_3d[18], np.array([[25.0, 1.0, 323.7, 311.9, 372.9, 353.1, 0.0902]]))

    assert_almost_equal(
        lesions_3d[19],
        np.array([[25.0, 1.0, 307.0, 239.5, 412.9, 357.0, 0.3813], [26.0, 1.0, 304.0, 238.8, 416.7, 354.8, 0.2841]]),
    )

    assert_almost_equal(lesions_3d[20], np.array([[27.0, 1.0, 331.3, 244.7, 409.2, 325.8, 0.1273]]))

    assert_almost_equal(
        lesions_3d[21],
        np.array(
            [
                [27.0, 1.0, 232.5, 149.1, 273.4, 196.1, 0.1167],
                [28.0, 1.0, 231.4, 148.8, 274.1, 200.5, 0.4956],
                [29.0, 1.0, 229.2, 149.0, 276.1, 201.5, 0.4381],
                [30.0, 1.0, 234.9, 148.4, 275.7, 197.4, 0.5958],
                [31.0, 1.0, 237.4, 148.6, 277.3, 192.6, 0.1917],
            ]
        ),
    )

    assert_almost_equal(lesions_3d[22], np.array([[29.0, 1.0, 203.4, 129.6, 296.3, 233.8, 0.1206]]))

    assert_almost_equal(lesions_3d[23], np.array([[32.0, 1.0, 250.7, 146.6, 287.4, 179.1, 0.105]]))
